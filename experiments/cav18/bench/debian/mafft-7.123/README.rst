
Introduction
------------

The files and folders in this folder come from the Ubuntu package mafft v.7.123,
available here:

http://packages.ubuntu.com/trusty/mafft

We have removed all folders but those that contain source code that we verify.
The folder ``test-data`` contains files used for input to the various programs of
the package that we run on these experiments.

We have also modified the ``Makefile`` so that ``make install`` copies the files
to ``/tmp/mafft``.

A useful tutorial on sequence alignment is available at
https://molevol.mbl.edu/index.php/Alignment_tutorial

The tool ``seaview`` is available as an Ubuntu package ;)

All programs
------------

This is the list of all programs generated by the package::

 addsingle
 contrafoldwrap
 countlen
 disttbfast
 dndblast
 dndfast7
 dndpre
 dvtditr
 f2cl
 getlag
 mafft-distance
 mafft-profile
 makedirectionlist
 mccaskillwrap
 multi2hat3s
 pair2hat3s
 pairash
 pairlocalalign
 regtable2seq
 replaceu
 restoreu
 rnatest
 score
 seq2regtable
 setcore
 setdirection
 sextet5
 splittbfast
 tbfast
 version

Out of which only the following ones contain pthread calls::

 addsingle
 dndpre
 makedirectionlist
 mccaskillwrap
 pairlocalalign

Testing script
--------------

The folowing script seems to be run to briefly test the package by Debian
package managers::

 MAFFT="mafft --thread 0"
 TESTDATADIR=/usr/share/doc/mafft/test/
 
 $MAFFT                               $TESTDATADIR/sample | diff $TESTDATADIR/sample.fftns2 -
 $MAFFT --maxiterate 100              $TESTDATADIR/sample | diff $TESTDATADIR/sample.fftnsi -
 $MAFFT --globalpair                  $TESTDATADIR/sample | diff $TESTDATADIR/sample.gins1 -
 $MAFFT --globalpair --maxiterate 100 $TESTDATADIR/sample | diff $TESTDATADIR/sample.ginsi -
 $MAFFT --localpair                   $TESTDATADIR/sample | diff $TESTDATADIR/sample.lins1 -
 $MAFFT --localpair --maxiterate 100  $TESTDATADIR/sample | diff $TESTDATADIR/sample.linsi -

addsingle
---------

- the mafft main script uses this program in 8 different places
- All threads work on the same mutex; each thread seems to acquire it one single
  time, it does something and it terminates.
- As a result the number of max confs will be n!, with n threads
- The number of sequences to align has very little impact on the run time
- Files hat2 and hat3 HAVE TO BE THERE BEFORE running the program, they will be
  opened, and the data they contain must have been generated with, eg,
  pairlocalalign on the same fasta file.
- We seem to need betwee 150M and 250M of heap to do this, in the current
  version of DPU

Example::

 F=7seq
 cp hat2.$F hat2
 cp hat3.$F hat3
 dpu addsingle.full.bc -m 350 -s 2 -O3 -- addsingle -C 6 -K -i $F.aln.fasta

dndpre
------

I didn't manage to get the right arguments so that the mafft script calls
dndpre. The script calls it in 4 places, but the script needs to be called with
very specific arguments for one of these calls to take place.

Anyway, it works when called by hand::

 dpu dndpre.full.bc -m 200 -s 2 -O0 -vv -- dndpre -C 2 -i 2seq.fasta
 dpu dndpre.full.bc -m 150 -s 2 -O0 -vv -- dndpre -C 3 -i 3seq.fasta

With 2 sequences, the number of configurations seems to be exponential on the
number of threads (base = 2).

makedirectionlist
-----------------

The relevant line in the mafft script:

 makedirectionlist $fragarg -C 4 -m -I $nadd -i 3seq.fasta -t 0.01 

$nad iss empty or -d 
$frarg is empty or -F

A call to::

  /tmp/mafft/bin/mafft --thread 10 --adjustdirection ase17/1ped.fasta

ends up calling to::
  /tmp/mafft/libexec/mafft/makedirectionlist -C 10 -m -I 0 -i infile -t 0.01

We can meke it work with DPU::

 dpu makedirectionlist.full.bc -m 200 -s 2 -O2 -v -- makedirectionlist -C 3 -m -I 0 -t 0.01 -i 2seq.fasta 

Maximum sizes with DPU: around 4 threads and around 3 or 4 sequences.
Options -d and -F do not change the number of configurations.
An execution::
  #0 @0 S C1 C2;
  #1 S;
  #2 S @5 X00 X00;
  #1 X00 @11 E;
  #0 J1;
  #2 E;
  #0 J2 @15 C2 C1;
  #2 S;
  #1 S X01 @21 X01;
  #2 X01 @25 E;
  #0 J2;
  #1 E;
  #0 J1 E


mccaskillwrap
------------

We can execute it correctly in dpu, but, the tool uses system(3) to run an
external program ``mxscarnamod`` using the following code::

 sprintf( com, "cd %s; %s/mxscarnamod -m -writebpp  _mccaskillin > _mccaskillout 2>_dum", dirname, whereismccaskillmea );
 res = system( com );
 if (res) exit (1);

In fact, the program can be found on the net, and mccaskillwrap can receive
using argument ``-d`` a path to the folder containing it::

 dpu mccaskillwrap.full.bc -m 200 -s 2 -O3 -vv -- mccaskillwrap -C 4 -i 3seq.fasta -d FOLDER

pairlocalalign
-------------

pairlocalalign -i FASTA -C NUM

NUM: number of threads
FASTA: path to the FASTA file

::
 dpu pairlocalalign.full.bc -m 200 -s 2 -O3 -vv -- pairlocalalign -C 4 -i 3seq.fasta 

When the main script is called this way::

 /tmp/mafft/bin/mafft --thread 10 --localpair ase17/1ped.fasta

it calls ``pairlocalalign`` this way::

 /tmp/mafft/libexec/mafft/pairlocalalign -l 2.7 -C 10 -b 62 -g -0.100 -f -2.00 -h 0.1 -L

